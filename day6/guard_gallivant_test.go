package day6

import (
	"testing"
)

func TestPartOneAoCInput(t *testing.T) {
	gmap, err := GuardGallivantFile()
	if err != nil {
		t.Error(err)
	}
	distPos := PartOne(gmap)
	if distPos != 4789 {
		t.Errorf("Part One distinct positions = %d, expected 4789", distPos)
	}
}

func TestPartOne(t *testing.T) {
	gmap := [][]string{
		{".", ".", ".", ".", "#", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", ".", ".", "#"},
		{".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", "#", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "#", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
		{".", "#", ".", ".", "^", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", ".", "#", "."},
		{"#", ".", ".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
	}
	distPos := PartOne(gmap)
	if distPos != 41 {
		t.Errorf("Part One distinct positions = %d, expected 41", distPos)
	}

	gmap = [][]string{
		{".", ".", ".", ".", "#", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", ".", ".", "#"},
		{".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", "#", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "#", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
		{".", "#", ".", ".", "<", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", ".", "#", "."},
		{"#", ".", ".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
	}
	distPos = PartOne(gmap)
	if distPos != 25 {
		t.Errorf("Part One distinct positions = %d, expected 25", distPos)
	}
}

func TestPartTwoAoCInput(t *testing.T) {
	gmap, err := GuardGallivantFile()
	if err != nil {
		t.Error(err)
	}
	loopPositions := PartTwo(gmap)
	if loopPositions != 1304 {
		t.Errorf("Part Two loops = %d, expected 1304", loopPositions)
	}
}

func TestPartTwo(t *testing.T) {
	// 3, 6
	// 6, 7
	// 7, 7
	// 1, 8
	// 3, 8
	// 7, 9
	gmap := [][]string{
		{".", ".", ".", ".", "#", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", ".", ".", "#"},
		{".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", "#", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", "#", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
		{".", "#", ".", ".", "^", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", ".", ".", "#", "."},
		{"#", ".", ".", ".", ".", ".", ".", ".", ".", "."},
		{".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
	}

	loopPositions := PartTwo(gmap)
	if loopPositions != 6 {
		t.Errorf("Part Two loops = %d, expected 6", loopPositions)
	}
}
